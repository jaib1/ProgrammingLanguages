;; Programming Languages, Homework 5

#lang racket
(provide (all-defined-out)) ;; so we can put tests in a second file

;; definition of structures for MUPL programs - Do NOT change
(struct var  (string) #:transparent)  ;; a variable, e.g., (var "foo")
(struct int  (num)    #:transparent)  ;; a constant number, e.g., (int 17)
(struct add  (e1 e2)  #:transparent)  ;; add two expressions
(struct ifgreater (e1 e2 e3 e4)    #:transparent) ;; if e1 > e2 then e3 else e4
(struct fun  (nameopt formal body) #:transparent) ;; a recursive(?) 1-argument function
(struct call (funexp actual)       #:transparent) ;; function call
(struct mlet (var e body) #:transparent) ;; a local binding (let var = e in body) 
(struct apair (e1 e2)     #:transparent) ;; make a new pair
(struct fst  (e)    #:transparent) ;; get first part of a pair
(struct snd  (e)    #:transparent) ;; get second part of a pair
(struct aunit ()    #:transparent) ;; unit value -- good for ending a list
(struct isaunit (e) #:transparent) ;; evaluate to 1 if e is unit else 0

;; a closure is not in "source" programs but /is/ a MUPL value; it is what functions evaluate to
(struct closure (env fun) #:transparent)

;;*NOTE: we won't worry about using TCO for this HW

;; Problem 1

(define (racketlist->mupllist Rlst)
  (if (null? Rlst)
      (aunit)
      (apair (car Rlst) (racketlist->mupllist (cdr Rlst)))))

(define (mupllist->racketlist Mlst)
  (if (aunit? Mlst)
      null
      (cons (eval-exp (fst Mlst)) (mupllist->racketlist (eval-exp (snd Mlst))))))
                              

;; CHANGE (put your solutions here)

;;*NOTE: the environment is a list of pairs (var -> val)

;; Problem 2

;; lookup a variable in an environment
;; Do NOT change this function
(define (envlookup env str)
  (cond [(null? env) (error "unbound variable during evaluation" str)]
        [(equal? (car (car env)) str) (cdr (car env))] ; if we find the matching variable name, extract the value from that var-val pair in th eenv
        [#t (envlookup (cdr env) str)]))

;; Do NOT change the two cases given to you.  
;; DO add more cases for other kinds of MUPL expressions.
;; We will test eval-under-env by calling it directly even though
;; "in real life" it would be a helper function of eval-exp.
(define (eval-under-env e env)
  (cond [(var? e) 
         (envlookup env (var-string e))]
        
        [(add? e) 
         (let ([v1 (eval-under-env (add-e1 e) env)]
               [v2 (eval-under-env (add-e2 e) env)])
           (if (and (int? v1)
                    (int? v2))
               (int (+ (int-num v1) 
                       (int-num v2)))
               (error "MUPL addition applied to non-number")))]
        
        ;; CHANGE add more cases here

        [(int? e) e]

        [(closure? e) e]

        [(aunit? e) e]

        [(isaunit? e)
         (let ([v (eval-under-env (isaunit-e e))])
           (if (aunit? v) (int 1) (int 0)))]
        
        [(apair? e)
        (let ([v1 (eval-under-env (apair-e1 e) env)]
              [v2 (eval-under-env (apair-e2 e) env)])
          (apair v1 v2))]      

        [(fst? e)
        (let ([v (eval-under-env (fst-e e) env)])
          (if (apair? v)
              (apair-e1 v)
              (error "'fst' not applied to apair")))]

        [(snd? e)
         (let ([v (eval-under-env (snd-e e) env)])
           (if (apair? v)
               (apair-e2 v)
               (error "'snd' not applied to apair")))]

        [(fun? e)
         (closure env e)]

        [(ifgreater? e) ; if e1 > e2 then e3 else e4
         (let ([v1 (eval-under-env (ifgreater-e1 e) env)]
               [v2 (eval-under-env (ifgreater-e2 e) env)]
               [v3 (eval-under-env (ifgreater-e3 e) env)]
               [v4 (eval-under-env (ifgreater-e4 e) env)])
           (if (and (int? v1) (int? v2))
               (if (> (int-num v1) (int-num v2))
                   v3
                   v4)
               (error "'ifgreater' not applied to two ints")))]

        [(mlet? e) ; (mlet var e body)
         (let* ([vName (mlet-var e)] ; get the variable name
               [val (eval-under-env (mlet-e e) env)] ; get the value
               [curEnv (append (list (cons vName val)) env)]) ; append the new vName-val pair to the env
           (eval-under-env (mlet-body e) curEnv))] ; evaluate the body of mlet in curEnv

        
        ; a call evaluates a function body in a particular environment
        [(call? e) ; (call funexp actual) ... clsr-env clsr-fun
         (let* ([clsr (eval-under-env (call-funexp e))])
           (if (not (closure? clsr))
               (error "'call' not applied to a valid closure")
               ; else, begin evaluation of clsr function body in env
               (let* ([fName (fun-nameopt (clsr-fun clsr))] ; create variable with function name
                      [clsrEnv (closure-env clsr)] ; get the current environment
                      ; now we need to extend the closure environment to include the given function
                      ; and we need to evaluate the function body in that extended environmeent
                      ; with the actual parameters given to the function
                      [clsrEnv (if fName (append (list (cons fName clsr)) clsrEnv) clsrEnv)] ;if there is a fName (i.e. not an anon function), then we extend environment with fName and its closure

        [#t (error (format "bad MUPL expression: ~v" e))]))

;; Do NOT change
(define (eval-exp e)
  (eval-under-env e null))
        
;; Problem 3

(define (ifaunit e1 e2 e3) "CHANGE")

(define (mlet* lstlst e2) "CHANGE")

(define (ifeq e1 e2 e3 e4) "CHANGE")

;; Problem 4

(define mupl-map "CHANGE")

(define mupl-mapAddN 
  (mlet "map" mupl-map
        "CHANGE (notice map is now in MUPL scope)"))

;; Challenge Problem

(struct fun-challenge (nameopt formal body freevars) #:transparent) ;; a recursive(?) 1-argument function

;; We will test this function directly, so it must do
;; as described in the assignment
(define (compute-free-vars e) "CHANGE")

;; Do NOT share code with eval-under-env because that will make
;; auto-grading and peer assessment more difficult, so
;; copy most of your interpreter here and make minor changes
(define (eval-under-env-c e env) "CHANGE")

;; Do NOT change this
(define (eval-exp-c e)
  (eval-under-env-c (compute-free-vars e) null))
